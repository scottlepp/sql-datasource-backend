// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: backend.proto
// Protobuf Java Version: 4.28.3

package com.grafana.backend;

/**
 * <pre>
 * ConversionRequest supports converting objects from one version to another 
 * </pre>
 *
 * Protobuf type {@code pluginv2.ConversionRequest}
 */
public final class ConversionRequest extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:pluginv2.ConversionRequest)
    ConversionRequestOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 28,
      /* patch= */ 3,
      /* suffix= */ "",
      ConversionRequest.class.getName());
  }
  // Use ConversionRequest.newBuilder() to construct.
  private ConversionRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private ConversionRequest() {
    uid_ = "";
    objects_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.grafana.backend.BackendProto.internal_static_pluginv2_ConversionRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.grafana.backend.BackendProto.internal_static_pluginv2_ConversionRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.grafana.backend.ConversionRequest.class, com.grafana.backend.ConversionRequest.Builder.class);
  }

  private int bitField0_;
  public static final int PLUGINCONTEXT_FIELD_NUMBER = 1;
  private com.grafana.backend.PluginContext pluginContext_;
  /**
   * <pre>
   * NOTE: this may not include app or datasource instance settings depending on the request
   * </pre>
   *
   * <code>.pluginv2.PluginContext pluginContext = 1;</code>
   * @return Whether the pluginContext field is set.
   */
  @java.lang.Override
  public boolean hasPluginContext() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * NOTE: this may not include app or datasource instance settings depending on the request
   * </pre>
   *
   * <code>.pluginv2.PluginContext pluginContext = 1;</code>
   * @return The pluginContext.
   */
  @java.lang.Override
  public com.grafana.backend.PluginContext getPluginContext() {
    return pluginContext_ == null ? com.grafana.backend.PluginContext.getDefaultInstance() : pluginContext_;
  }
  /**
   * <pre>
   * NOTE: this may not include app or datasource instance settings depending on the request
   * </pre>
   *
   * <code>.pluginv2.PluginContext pluginContext = 1;</code>
   */
  @java.lang.Override
  public com.grafana.backend.PluginContextOrBuilder getPluginContextOrBuilder() {
    return pluginContext_ == null ? com.grafana.backend.PluginContext.getDefaultInstance() : pluginContext_;
  }

  public static final int UID_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object uid_ = "";
  /**
   * <pre>
   * uid is an identifier for the individual request/response. It allows distinguishing instances of requests which are
   * otherwise identical (parallel requests, etc).
   * The UID is meant to track the round trip (request/response) between the Kubernetes API server and the webhook, not the user request.
   * It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
   * </pre>
   *
   * <code>string uid = 2;</code>
   * @return The uid.
   */
  @java.lang.Override
  public java.lang.String getUid() {
    java.lang.Object ref = uid_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      uid_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * uid is an identifier for the individual request/response. It allows distinguishing instances of requests which are
   * otherwise identical (parallel requests, etc).
   * The UID is meant to track the round trip (request/response) between the Kubernetes API server and the webhook, not the user request.
   * It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
   * </pre>
   *
   * <code>string uid = 2;</code>
   * @return The bytes for uid.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUidBytes() {
    java.lang.Object ref = uid_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      uid_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OBJECTS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<com.grafana.backend.RawObject> objects_;
  /**
   * <pre>
   * Objects to convert
   * +listType=atomic
   * </pre>
   *
   * <code>repeated .pluginv2.RawObject objects = 3;</code>
   */
  @java.lang.Override
  public java.util.List<com.grafana.backend.RawObject> getObjectsList() {
    return objects_;
  }
  /**
   * <pre>
   * Objects to convert
   * +listType=atomic
   * </pre>
   *
   * <code>repeated .pluginv2.RawObject objects = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.grafana.backend.RawObjectOrBuilder> 
      getObjectsOrBuilderList() {
    return objects_;
  }
  /**
   * <pre>
   * Objects to convert
   * +listType=atomic
   * </pre>
   *
   * <code>repeated .pluginv2.RawObject objects = 3;</code>
   */
  @java.lang.Override
  public int getObjectsCount() {
    return objects_.size();
  }
  /**
   * <pre>
   * Objects to convert
   * +listType=atomic
   * </pre>
   *
   * <code>repeated .pluginv2.RawObject objects = 3;</code>
   */
  @java.lang.Override
  public com.grafana.backend.RawObject getObjects(int index) {
    return objects_.get(index);
  }
  /**
   * <pre>
   * Objects to convert
   * +listType=atomic
   * </pre>
   *
   * <code>repeated .pluginv2.RawObject objects = 3;</code>
   */
  @java.lang.Override
  public com.grafana.backend.RawObjectOrBuilder getObjectsOrBuilder(
      int index) {
    return objects_.get(index);
  }

  public static final int TARGET_VERSION_FIELD_NUMBER = 4;
  private com.grafana.backend.GroupVersion targetVersion_;
  /**
   * <pre>
   * Target converted version
   * </pre>
   *
   * <code>.pluginv2.GroupVersion target_version = 4;</code>
   * @return Whether the targetVersion field is set.
   */
  @java.lang.Override
  public boolean hasTargetVersion() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Target converted version
   * </pre>
   *
   * <code>.pluginv2.GroupVersion target_version = 4;</code>
   * @return The targetVersion.
   */
  @java.lang.Override
  public com.grafana.backend.GroupVersion getTargetVersion() {
    return targetVersion_ == null ? com.grafana.backend.GroupVersion.getDefaultInstance() : targetVersion_;
  }
  /**
   * <pre>
   * Target converted version
   * </pre>
   *
   * <code>.pluginv2.GroupVersion target_version = 4;</code>
   */
  @java.lang.Override
  public com.grafana.backend.GroupVersionOrBuilder getTargetVersionOrBuilder() {
    return targetVersion_ == null ? com.grafana.backend.GroupVersion.getDefaultInstance() : targetVersion_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getPluginContext());
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(uid_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 2, uid_);
    }
    for (int i = 0; i < objects_.size(); i++) {
      output.writeMessage(3, objects_.get(i));
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(4, getTargetVersion());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getPluginContext());
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(uid_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(2, uid_);
    }
    for (int i = 0; i < objects_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, objects_.get(i));
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getTargetVersion());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.grafana.backend.ConversionRequest)) {
      return super.equals(obj);
    }
    com.grafana.backend.ConversionRequest other = (com.grafana.backend.ConversionRequest) obj;

    if (hasPluginContext() != other.hasPluginContext()) return false;
    if (hasPluginContext()) {
      if (!getPluginContext()
          .equals(other.getPluginContext())) return false;
    }
    if (!getUid()
        .equals(other.getUid())) return false;
    if (!getObjectsList()
        .equals(other.getObjectsList())) return false;
    if (hasTargetVersion() != other.hasTargetVersion()) return false;
    if (hasTargetVersion()) {
      if (!getTargetVersion()
          .equals(other.getTargetVersion())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPluginContext()) {
      hash = (37 * hash) + PLUGINCONTEXT_FIELD_NUMBER;
      hash = (53 * hash) + getPluginContext().hashCode();
    }
    hash = (37 * hash) + UID_FIELD_NUMBER;
    hash = (53 * hash) + getUid().hashCode();
    if (getObjectsCount() > 0) {
      hash = (37 * hash) + OBJECTS_FIELD_NUMBER;
      hash = (53 * hash) + getObjectsList().hashCode();
    }
    if (hasTargetVersion()) {
      hash = (37 * hash) + TARGET_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getTargetVersion().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.grafana.backend.ConversionRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.grafana.backend.ConversionRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.grafana.backend.ConversionRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.grafana.backend.ConversionRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.grafana.backend.ConversionRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.grafana.backend.ConversionRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.grafana.backend.ConversionRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.grafana.backend.ConversionRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.grafana.backend.ConversionRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.grafana.backend.ConversionRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.grafana.backend.ConversionRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.grafana.backend.ConversionRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.grafana.backend.ConversionRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * ConversionRequest supports converting objects from one version to another 
   * </pre>
   *
   * Protobuf type {@code pluginv2.ConversionRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:pluginv2.ConversionRequest)
      com.grafana.backend.ConversionRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.grafana.backend.BackendProto.internal_static_pluginv2_ConversionRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.grafana.backend.BackendProto.internal_static_pluginv2_ConversionRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.grafana.backend.ConversionRequest.class, com.grafana.backend.ConversionRequest.Builder.class);
    }

    // Construct using com.grafana.backend.ConversionRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getPluginContextFieldBuilder();
        getObjectsFieldBuilder();
        getTargetVersionFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      pluginContext_ = null;
      if (pluginContextBuilder_ != null) {
        pluginContextBuilder_.dispose();
        pluginContextBuilder_ = null;
      }
      uid_ = "";
      if (objectsBuilder_ == null) {
        objects_ = java.util.Collections.emptyList();
      } else {
        objects_ = null;
        objectsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      targetVersion_ = null;
      if (targetVersionBuilder_ != null) {
        targetVersionBuilder_.dispose();
        targetVersionBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.grafana.backend.BackendProto.internal_static_pluginv2_ConversionRequest_descriptor;
    }

    @java.lang.Override
    public com.grafana.backend.ConversionRequest getDefaultInstanceForType() {
      return com.grafana.backend.ConversionRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.grafana.backend.ConversionRequest build() {
      com.grafana.backend.ConversionRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.grafana.backend.ConversionRequest buildPartial() {
      com.grafana.backend.ConversionRequest result = new com.grafana.backend.ConversionRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.grafana.backend.ConversionRequest result) {
      if (objectsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          objects_ = java.util.Collections.unmodifiableList(objects_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.objects_ = objects_;
      } else {
        result.objects_ = objectsBuilder_.build();
      }
    }

    private void buildPartial0(com.grafana.backend.ConversionRequest result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.pluginContext_ = pluginContextBuilder_ == null
            ? pluginContext_
            : pluginContextBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.uid_ = uid_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.targetVersion_ = targetVersionBuilder_ == null
            ? targetVersion_
            : targetVersionBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.grafana.backend.ConversionRequest) {
        return mergeFrom((com.grafana.backend.ConversionRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.grafana.backend.ConversionRequest other) {
      if (other == com.grafana.backend.ConversionRequest.getDefaultInstance()) return this;
      if (other.hasPluginContext()) {
        mergePluginContext(other.getPluginContext());
      }
      if (!other.getUid().isEmpty()) {
        uid_ = other.uid_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (objectsBuilder_ == null) {
        if (!other.objects_.isEmpty()) {
          if (objects_.isEmpty()) {
            objects_ = other.objects_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureObjectsIsMutable();
            objects_.addAll(other.objects_);
          }
          onChanged();
        }
      } else {
        if (!other.objects_.isEmpty()) {
          if (objectsBuilder_.isEmpty()) {
            objectsBuilder_.dispose();
            objectsBuilder_ = null;
            objects_ = other.objects_;
            bitField0_ = (bitField0_ & ~0x00000004);
            objectsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getObjectsFieldBuilder() : null;
          } else {
            objectsBuilder_.addAllMessages(other.objects_);
          }
        }
      }
      if (other.hasTargetVersion()) {
        mergeTargetVersion(other.getTargetVersion());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getPluginContextFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              uid_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              com.grafana.backend.RawObject m =
                  input.readMessage(
                      com.grafana.backend.RawObject.parser(),
                      extensionRegistry);
              if (objectsBuilder_ == null) {
                ensureObjectsIsMutable();
                objects_.add(m);
              } else {
                objectsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getTargetVersionFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.grafana.backend.PluginContext pluginContext_;
    private com.google.protobuf.SingleFieldBuilder<
        com.grafana.backend.PluginContext, com.grafana.backend.PluginContext.Builder, com.grafana.backend.PluginContextOrBuilder> pluginContextBuilder_;
    /**
     * <pre>
     * NOTE: this may not include app or datasource instance settings depending on the request
     * </pre>
     *
     * <code>.pluginv2.PluginContext pluginContext = 1;</code>
     * @return Whether the pluginContext field is set.
     */
    public boolean hasPluginContext() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * NOTE: this may not include app or datasource instance settings depending on the request
     * </pre>
     *
     * <code>.pluginv2.PluginContext pluginContext = 1;</code>
     * @return The pluginContext.
     */
    public com.grafana.backend.PluginContext getPluginContext() {
      if (pluginContextBuilder_ == null) {
        return pluginContext_ == null ? com.grafana.backend.PluginContext.getDefaultInstance() : pluginContext_;
      } else {
        return pluginContextBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * NOTE: this may not include app or datasource instance settings depending on the request
     * </pre>
     *
     * <code>.pluginv2.PluginContext pluginContext = 1;</code>
     */
    public Builder setPluginContext(com.grafana.backend.PluginContext value) {
      if (pluginContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pluginContext_ = value;
      } else {
        pluginContextBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * NOTE: this may not include app or datasource instance settings depending on the request
     * </pre>
     *
     * <code>.pluginv2.PluginContext pluginContext = 1;</code>
     */
    public Builder setPluginContext(
        com.grafana.backend.PluginContext.Builder builderForValue) {
      if (pluginContextBuilder_ == null) {
        pluginContext_ = builderForValue.build();
      } else {
        pluginContextBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * NOTE: this may not include app or datasource instance settings depending on the request
     * </pre>
     *
     * <code>.pluginv2.PluginContext pluginContext = 1;</code>
     */
    public Builder mergePluginContext(com.grafana.backend.PluginContext value) {
      if (pluginContextBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          pluginContext_ != null &&
          pluginContext_ != com.grafana.backend.PluginContext.getDefaultInstance()) {
          getPluginContextBuilder().mergeFrom(value);
        } else {
          pluginContext_ = value;
        }
      } else {
        pluginContextBuilder_.mergeFrom(value);
      }
      if (pluginContext_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * NOTE: this may not include app or datasource instance settings depending on the request
     * </pre>
     *
     * <code>.pluginv2.PluginContext pluginContext = 1;</code>
     */
    public Builder clearPluginContext() {
      bitField0_ = (bitField0_ & ~0x00000001);
      pluginContext_ = null;
      if (pluginContextBuilder_ != null) {
        pluginContextBuilder_.dispose();
        pluginContextBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * NOTE: this may not include app or datasource instance settings depending on the request
     * </pre>
     *
     * <code>.pluginv2.PluginContext pluginContext = 1;</code>
     */
    public com.grafana.backend.PluginContext.Builder getPluginContextBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getPluginContextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * NOTE: this may not include app or datasource instance settings depending on the request
     * </pre>
     *
     * <code>.pluginv2.PluginContext pluginContext = 1;</code>
     */
    public com.grafana.backend.PluginContextOrBuilder getPluginContextOrBuilder() {
      if (pluginContextBuilder_ != null) {
        return pluginContextBuilder_.getMessageOrBuilder();
      } else {
        return pluginContext_ == null ?
            com.grafana.backend.PluginContext.getDefaultInstance() : pluginContext_;
      }
    }
    /**
     * <pre>
     * NOTE: this may not include app or datasource instance settings depending on the request
     * </pre>
     *
     * <code>.pluginv2.PluginContext pluginContext = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.grafana.backend.PluginContext, com.grafana.backend.PluginContext.Builder, com.grafana.backend.PluginContextOrBuilder> 
        getPluginContextFieldBuilder() {
      if (pluginContextBuilder_ == null) {
        pluginContextBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.grafana.backend.PluginContext, com.grafana.backend.PluginContext.Builder, com.grafana.backend.PluginContextOrBuilder>(
                getPluginContext(),
                getParentForChildren(),
                isClean());
        pluginContext_ = null;
      }
      return pluginContextBuilder_;
    }

    private java.lang.Object uid_ = "";
    /**
     * <pre>
     * uid is an identifier for the individual request/response. It allows distinguishing instances of requests which are
     * otherwise identical (parallel requests, etc).
     * The UID is meant to track the round trip (request/response) between the Kubernetes API server and the webhook, not the user request.
     * It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
     * </pre>
     *
     * <code>string uid = 2;</code>
     * @return The uid.
     */
    public java.lang.String getUid() {
      java.lang.Object ref = uid_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        uid_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * uid is an identifier for the individual request/response. It allows distinguishing instances of requests which are
     * otherwise identical (parallel requests, etc).
     * The UID is meant to track the round trip (request/response) between the Kubernetes API server and the webhook, not the user request.
     * It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
     * </pre>
     *
     * <code>string uid = 2;</code>
     * @return The bytes for uid.
     */
    public com.google.protobuf.ByteString
        getUidBytes() {
      java.lang.Object ref = uid_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * uid is an identifier for the individual request/response. It allows distinguishing instances of requests which are
     * otherwise identical (parallel requests, etc).
     * The UID is meant to track the round trip (request/response) between the Kubernetes API server and the webhook, not the user request.
     * It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
     * </pre>
     *
     * <code>string uid = 2;</code>
     * @param value The uid to set.
     * @return This builder for chaining.
     */
    public Builder setUid(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      uid_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * uid is an identifier for the individual request/response. It allows distinguishing instances of requests which are
     * otherwise identical (parallel requests, etc).
     * The UID is meant to track the round trip (request/response) between the Kubernetes API server and the webhook, not the user request.
     * It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
     * </pre>
     *
     * <code>string uid = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearUid() {
      uid_ = getDefaultInstance().getUid();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * uid is an identifier for the individual request/response. It allows distinguishing instances of requests which are
     * otherwise identical (parallel requests, etc).
     * The UID is meant to track the round trip (request/response) between the Kubernetes API server and the webhook, not the user request.
     * It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
     * </pre>
     *
     * <code>string uid = 2;</code>
     * @param value The bytes for uid to set.
     * @return This builder for chaining.
     */
    public Builder setUidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      uid_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.util.List<com.grafana.backend.RawObject> objects_ =
      java.util.Collections.emptyList();
    private void ensureObjectsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        objects_ = new java.util.ArrayList<com.grafana.backend.RawObject>(objects_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.grafana.backend.RawObject, com.grafana.backend.RawObject.Builder, com.grafana.backend.RawObjectOrBuilder> objectsBuilder_;

    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public java.util.List<com.grafana.backend.RawObject> getObjectsList() {
      if (objectsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(objects_);
      } else {
        return objectsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public int getObjectsCount() {
      if (objectsBuilder_ == null) {
        return objects_.size();
      } else {
        return objectsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public com.grafana.backend.RawObject getObjects(int index) {
      if (objectsBuilder_ == null) {
        return objects_.get(index);
      } else {
        return objectsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public Builder setObjects(
        int index, com.grafana.backend.RawObject value) {
      if (objectsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureObjectsIsMutable();
        objects_.set(index, value);
        onChanged();
      } else {
        objectsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public Builder setObjects(
        int index, com.grafana.backend.RawObject.Builder builderForValue) {
      if (objectsBuilder_ == null) {
        ensureObjectsIsMutable();
        objects_.set(index, builderForValue.build());
        onChanged();
      } else {
        objectsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public Builder addObjects(com.grafana.backend.RawObject value) {
      if (objectsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureObjectsIsMutable();
        objects_.add(value);
        onChanged();
      } else {
        objectsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public Builder addObjects(
        int index, com.grafana.backend.RawObject value) {
      if (objectsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureObjectsIsMutable();
        objects_.add(index, value);
        onChanged();
      } else {
        objectsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public Builder addObjects(
        com.grafana.backend.RawObject.Builder builderForValue) {
      if (objectsBuilder_ == null) {
        ensureObjectsIsMutable();
        objects_.add(builderForValue.build());
        onChanged();
      } else {
        objectsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public Builder addObjects(
        int index, com.grafana.backend.RawObject.Builder builderForValue) {
      if (objectsBuilder_ == null) {
        ensureObjectsIsMutable();
        objects_.add(index, builderForValue.build());
        onChanged();
      } else {
        objectsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public Builder addAllObjects(
        java.lang.Iterable<? extends com.grafana.backend.RawObject> values) {
      if (objectsBuilder_ == null) {
        ensureObjectsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, objects_);
        onChanged();
      } else {
        objectsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public Builder clearObjects() {
      if (objectsBuilder_ == null) {
        objects_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        objectsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public Builder removeObjects(int index) {
      if (objectsBuilder_ == null) {
        ensureObjectsIsMutable();
        objects_.remove(index);
        onChanged();
      } else {
        objectsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public com.grafana.backend.RawObject.Builder getObjectsBuilder(
        int index) {
      return getObjectsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public com.grafana.backend.RawObjectOrBuilder getObjectsOrBuilder(
        int index) {
      if (objectsBuilder_ == null) {
        return objects_.get(index);  } else {
        return objectsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public java.util.List<? extends com.grafana.backend.RawObjectOrBuilder> 
         getObjectsOrBuilderList() {
      if (objectsBuilder_ != null) {
        return objectsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(objects_);
      }
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public com.grafana.backend.RawObject.Builder addObjectsBuilder() {
      return getObjectsFieldBuilder().addBuilder(
          com.grafana.backend.RawObject.getDefaultInstance());
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public com.grafana.backend.RawObject.Builder addObjectsBuilder(
        int index) {
      return getObjectsFieldBuilder().addBuilder(
          index, com.grafana.backend.RawObject.getDefaultInstance());
    }
    /**
     * <pre>
     * Objects to convert
     * +listType=atomic
     * </pre>
     *
     * <code>repeated .pluginv2.RawObject objects = 3;</code>
     */
    public java.util.List<com.grafana.backend.RawObject.Builder> 
         getObjectsBuilderList() {
      return getObjectsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.grafana.backend.RawObject, com.grafana.backend.RawObject.Builder, com.grafana.backend.RawObjectOrBuilder> 
        getObjectsFieldBuilder() {
      if (objectsBuilder_ == null) {
        objectsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.grafana.backend.RawObject, com.grafana.backend.RawObject.Builder, com.grafana.backend.RawObjectOrBuilder>(
                objects_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        objects_ = null;
      }
      return objectsBuilder_;
    }

    private com.grafana.backend.GroupVersion targetVersion_;
    private com.google.protobuf.SingleFieldBuilder<
        com.grafana.backend.GroupVersion, com.grafana.backend.GroupVersion.Builder, com.grafana.backend.GroupVersionOrBuilder> targetVersionBuilder_;
    /**
     * <pre>
     * Target converted version
     * </pre>
     *
     * <code>.pluginv2.GroupVersion target_version = 4;</code>
     * @return Whether the targetVersion field is set.
     */
    public boolean hasTargetVersion() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Target converted version
     * </pre>
     *
     * <code>.pluginv2.GroupVersion target_version = 4;</code>
     * @return The targetVersion.
     */
    public com.grafana.backend.GroupVersion getTargetVersion() {
      if (targetVersionBuilder_ == null) {
        return targetVersion_ == null ? com.grafana.backend.GroupVersion.getDefaultInstance() : targetVersion_;
      } else {
        return targetVersionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Target converted version
     * </pre>
     *
     * <code>.pluginv2.GroupVersion target_version = 4;</code>
     */
    public Builder setTargetVersion(com.grafana.backend.GroupVersion value) {
      if (targetVersionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        targetVersion_ = value;
      } else {
        targetVersionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Target converted version
     * </pre>
     *
     * <code>.pluginv2.GroupVersion target_version = 4;</code>
     */
    public Builder setTargetVersion(
        com.grafana.backend.GroupVersion.Builder builderForValue) {
      if (targetVersionBuilder_ == null) {
        targetVersion_ = builderForValue.build();
      } else {
        targetVersionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Target converted version
     * </pre>
     *
     * <code>.pluginv2.GroupVersion target_version = 4;</code>
     */
    public Builder mergeTargetVersion(com.grafana.backend.GroupVersion value) {
      if (targetVersionBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          targetVersion_ != null &&
          targetVersion_ != com.grafana.backend.GroupVersion.getDefaultInstance()) {
          getTargetVersionBuilder().mergeFrom(value);
        } else {
          targetVersion_ = value;
        }
      } else {
        targetVersionBuilder_.mergeFrom(value);
      }
      if (targetVersion_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Target converted version
     * </pre>
     *
     * <code>.pluginv2.GroupVersion target_version = 4;</code>
     */
    public Builder clearTargetVersion() {
      bitField0_ = (bitField0_ & ~0x00000008);
      targetVersion_ = null;
      if (targetVersionBuilder_ != null) {
        targetVersionBuilder_.dispose();
        targetVersionBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Target converted version
     * </pre>
     *
     * <code>.pluginv2.GroupVersion target_version = 4;</code>
     */
    public com.grafana.backend.GroupVersion.Builder getTargetVersionBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getTargetVersionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Target converted version
     * </pre>
     *
     * <code>.pluginv2.GroupVersion target_version = 4;</code>
     */
    public com.grafana.backend.GroupVersionOrBuilder getTargetVersionOrBuilder() {
      if (targetVersionBuilder_ != null) {
        return targetVersionBuilder_.getMessageOrBuilder();
      } else {
        return targetVersion_ == null ?
            com.grafana.backend.GroupVersion.getDefaultInstance() : targetVersion_;
      }
    }
    /**
     * <pre>
     * Target converted version
     * </pre>
     *
     * <code>.pluginv2.GroupVersion target_version = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.grafana.backend.GroupVersion, com.grafana.backend.GroupVersion.Builder, com.grafana.backend.GroupVersionOrBuilder> 
        getTargetVersionFieldBuilder() {
      if (targetVersionBuilder_ == null) {
        targetVersionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.grafana.backend.GroupVersion, com.grafana.backend.GroupVersion.Builder, com.grafana.backend.GroupVersionOrBuilder>(
                getTargetVersion(),
                getParentForChildren(),
                isClean());
        targetVersion_ = null;
      }
      return targetVersionBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:pluginv2.ConversionRequest)
  }

  // @@protoc_insertion_point(class_scope:pluginv2.ConversionRequest)
  private static final com.grafana.backend.ConversionRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.grafana.backend.ConversionRequest();
  }

  public static com.grafana.backend.ConversionRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConversionRequest>
      PARSER = new com.google.protobuf.AbstractParser<ConversionRequest>() {
    @java.lang.Override
    public ConversionRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ConversionRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConversionRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.grafana.backend.ConversionRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

