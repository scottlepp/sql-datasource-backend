// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: backend.proto
// Protobuf Java Version: 4.28.3

package com.grafana.backend;

public interface ConversionRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:pluginv2.ConversionRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * NOTE: this may not include app or datasource instance settings depending on the request
   * </pre>
   *
   * <code>.pluginv2.PluginContext pluginContext = 1;</code>
   * @return Whether the pluginContext field is set.
   */
  boolean hasPluginContext();
  /**
   * <pre>
   * NOTE: this may not include app or datasource instance settings depending on the request
   * </pre>
   *
   * <code>.pluginv2.PluginContext pluginContext = 1;</code>
   * @return The pluginContext.
   */
  com.grafana.backend.PluginContext getPluginContext();
  /**
   * <pre>
   * NOTE: this may not include app or datasource instance settings depending on the request
   * </pre>
   *
   * <code>.pluginv2.PluginContext pluginContext = 1;</code>
   */
  com.grafana.backend.PluginContextOrBuilder getPluginContextOrBuilder();

  /**
   * <pre>
   * uid is an identifier for the individual request/response. It allows distinguishing instances of requests which are
   * otherwise identical (parallel requests, etc).
   * The UID is meant to track the round trip (request/response) between the Kubernetes API server and the webhook, not the user request.
   * It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
   * </pre>
   *
   * <code>string uid = 2;</code>
   * @return The uid.
   */
  java.lang.String getUid();
  /**
   * <pre>
   * uid is an identifier for the individual request/response. It allows distinguishing instances of requests which are
   * otherwise identical (parallel requests, etc).
   * The UID is meant to track the round trip (request/response) between the Kubernetes API server and the webhook, not the user request.
   * It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
   * </pre>
   *
   * <code>string uid = 2;</code>
   * @return The bytes for uid.
   */
  com.google.protobuf.ByteString
      getUidBytes();

  /**
   * <pre>
   * Objects to convert
   * +listType=atomic
   * </pre>
   *
   * <code>repeated .pluginv2.RawObject objects = 3;</code>
   */
  java.util.List<com.grafana.backend.RawObject> 
      getObjectsList();
  /**
   * <pre>
   * Objects to convert
   * +listType=atomic
   * </pre>
   *
   * <code>repeated .pluginv2.RawObject objects = 3;</code>
   */
  com.grafana.backend.RawObject getObjects(int index);
  /**
   * <pre>
   * Objects to convert
   * +listType=atomic
   * </pre>
   *
   * <code>repeated .pluginv2.RawObject objects = 3;</code>
   */
  int getObjectsCount();
  /**
   * <pre>
   * Objects to convert
   * +listType=atomic
   * </pre>
   *
   * <code>repeated .pluginv2.RawObject objects = 3;</code>
   */
  java.util.List<? extends com.grafana.backend.RawObjectOrBuilder> 
      getObjectsOrBuilderList();
  /**
   * <pre>
   * Objects to convert
   * +listType=atomic
   * </pre>
   *
   * <code>repeated .pluginv2.RawObject objects = 3;</code>
   */
  com.grafana.backend.RawObjectOrBuilder getObjectsOrBuilder(
      int index);

  /**
   * <pre>
   * Target converted version
   * </pre>
   *
   * <code>.pluginv2.GroupVersion target_version = 4;</code>
   * @return Whether the targetVersion field is set.
   */
  boolean hasTargetVersion();
  /**
   * <pre>
   * Target converted version
   * </pre>
   *
   * <code>.pluginv2.GroupVersion target_version = 4;</code>
   * @return The targetVersion.
   */
  com.grafana.backend.GroupVersion getTargetVersion();
  /**
   * <pre>
   * Target converted version
   * </pre>
   *
   * <code>.pluginv2.GroupVersion target_version = 4;</code>
   */
  com.grafana.backend.GroupVersionOrBuilder getTargetVersionOrBuilder();
}
